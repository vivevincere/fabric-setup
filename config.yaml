name: "basic-setup"

# Describe what the target network is/does.
description: "The network which will host my first blockchain"

# Schema version of the content. Used by the SDK to apply the corresponding parsing rules.
version: 1.0.0

# The client section used by GO SDK.
client:
  # Which organization does this application instance belong to? The value must be the name of an org
  organization: Org1
  logging:
    level: info

  # Global configuration for peer, event service and orderer timeouts
  # peer:
  #   timeout:
  #     connection: 3s
  #     queryResponse: 45s
  #     executeTxResponse: 30s
  # eventService:
  #   timeout:
  #     connection: 3s
  #     registrationResponse: 3s
  # orderer:
  #   timeout:
  #     connection: 3s
  #     response: 5s

  # Root of the MSP directories with keys and certs. The Membership Service Providers is component that aims to offer an abstraction of a membership operation architecture.
  cryptoconfig:
    path: "./artifacts/channel/crypto-config"

  #Some SDKs support pluggable KV stores, the properties under "credentialStore" are implementation specific
  # credentialStore:
  #   path: "/tmp/state-store"

  #    # [Optional]. Specific to the CryptoSuite implementation used by GO SDK. Software-based implementations requiring a key store. PKCS#11 based implementations does not.
  #   cryptoStore:
  #     path: "/tmp/msp"

  # BCCSP config for the client. Used by GO SDK. It's the Blockchain Cryptographic Service Provider.
  # It offers the implementation of cryptographic standards and algorithms.
  BCCSP:
    security:
     enabled: true
     default:
      provider: "SW"
     hashAlgorithm: "SHA2"
     softVerify: true
     ephemeral: false
     level: 256

  tlsCerts:
    systemCertPool: true

    client:
      key: 
        path: "./artifacts/channel/crypto-config/peerOrganizations/org1.example.com/users/User1@org1.example.com/tls/client.key"
      cert:
        path: "./artifacts/channel/crypto-config/peerOrganizations/org1.example.com/users/User1@org1.example.com/tls/client.crt"


# [Optional]. But most apps would have this section so that channel objects can be constructed based on the content below.
# If one of your application is creating channels, you might not use this
channels:
  mychannel:


    # Network entity which maintains a ledger and runs chaincode containers in order to perform operations to the ledger. Peers are owned and maintained by members.
    peers:
      peer0.org1.example.com:
        # [Optional]. will this peer be sent transaction proposals for endorsement? The peer must
        # have the chaincode installed. The app can also use this property to decide which peers
        # to send the chaincode install request. Default: true
        endorsingPeer: true

        # [Optional]. will this peer be sent query proposals? The peer must have the chaincode
        # installed. The app can also use this property to decide which peers to send the
        # chaincode install request. Default: true
        chaincodeQuery: true

        # [Optional]. will this peer be sent query proposals that do not require chaincodes, like
        # queryBlock(), queryTransaction(), etc. Default: true
        ledgerQuery: true

        # [Optional]. will this peer be the target of the SDK's listener registration? All peers can
        # produce events but the app typically only needs to connect to one to listen to events.
        # Default: true
        eventSource: true

      peer1.org1.example.com:

# List of participating organizations in this network
organizations:
  OrdererOrg:
     mspid: OrdererMSP

     cryptopath: "./artifacts/channel/crypto-config/ordererOrganizations/example.com/users/Admin@example.com/msp"

     # adminPrivateKey:
     #  path: "./artifacts/channel/crypto-config/ordererOrganizations/example.com/users/Admin@example.com/msp/keystore/priv_sk"

    # users:
    #   admin:
    #     key:
    #       path: "./artifacts/channel/crypto-config/ordererOrganizations/example.com/users/Admin@example.com/msp/keystore/priv_sk"
    #     cert:
    #       path: "./artifacts/channel/crypto-config/ordererOrganizations/example.com/users/Admin@example.com/msp/signcerts/Admin@example.com-cert.pem"


  Org1:
    mspid: Org1MSP
    cryptoPath: peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp
    peers:
      - peer0.org1.example.com
      - peer1.org1.example.com
    certificateAuthorities:
      - ca.org1.example.com
    adminPrivateKey:
      path: "./artifacts/channel/crypto-config/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp/keystore/priv_sk"
    users:
      Admin:
        key:
          path: "./artifacts/channel/crypto-config/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp/keystore/priv_sk"
        cert:
          path: "./artifacts/channel/crypto-config/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp/signcerts/Admin@org1.example.com-cert.pem"

# List of orderers to send transaction and channel create/update requests to.
# The orderers consent on the order of transactions in a block to be committed to the ledger. For the time being only one orderer is needed.
orderers:
  orderer.example.com:
    url: grpcs://localhost:7050
    grpcOptions:
      ssl-target-name-override: orderer.example.com
      grpc-max-send-message-length: 15
      keep-alive-time: 0s
      keep-alive-timeout: 20s
      keep-alive-permit: false
      fail-fast: false
      allow-insecure: false
    tlsCACerts:
      path: "./artifacts/channel/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem"

# List of peers to send various requests to, including endorsement, query and event listener registration.
peers:
  peer0.org1.example.com:
    # this URL is used to send endorsement and query requests
    url: grpcs://localhost:7051
    # These parameters should be set in coordination with the keepalive policy on the server
    grpcOptions:
      ssl-target-name-override: peer0.org1.example.com
      grpc.http2.keepalive_time: 15

    tlsCACerts:
      path: "./artifacts/channel/crypto-config/peerOrganizations/org1.example.com/tlsca/tlsca.org1.example.com-cert.pem"

  peer1.org1.example.com:
    url: grpcs://localhost:8051
    grpcOptions:
      ssl-target-name-override: peer1.org1.example.com
      grpc.http2.keepalive_time: 15
    tlsCACerts:
      # Certificate location absolute path
      path: "./artifacts/channel/crypto-config/peerOrganizations/org1.example.com/tlsca/tlsca.org1.example.com-cert.pem"

# Fabric-CA is a special kind of Certificate Authority provided by Hyperledger Fabric which allows certificate management to be done via REST APIs.
certificateAuthorities:
  ca.org1.example.com:
    url: https://localhost:7054
    # the properties specified under this object are passed to the 'http' client verbatim when making the request to the Fabric-CA server

    tlsCACerts:
      path: "./artifacts/channel/crypto-config/peerOrganizations/org1.example.com/tlsca/tlsca.org1.example.com-cert.pem"

      client:
        key:
          path: "./artifacts/channel/crypto-config/peerOrganizations/org1.example.com/users/Admin@org1.example.com/tls/client.key"

        cert:
          path: "./artifacts/channel/crypto-config/peerOrganizations/org1.example.com/users/Admin@org1.example.com/tls/client.crt"

    registrar:
      enrollId: admin
      enrollSecret: adminpw
    caName: ca.org1.example.com

entityMatchers:
  peer:
    - pattern: (\w+).example.(\w)
      urlSubstitutionExp: localhost:7051
      sslTargetOverrideURLSubstitution: localhost
      mappedhost: peer0.org1.example.com
  orderer:
    - pattern: (\w+).example.(\w)
      urlSubstitutionExp: localhost:7050
      sslTargetOverrideURLSubstitution: localhost
      mappedhost: orderer.example.com